# Server Configuration
server.port=${SERVER_PORT:8080}

# Database Configuration
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

spring.datasource.properties.ssl=true
spring.datasource.properties.sslmode=require


# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=false

# Logging Configuration
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.tech.project.schedule=DEBUG
logging.level.org.springframework=DEBUG

# Server Error Handling
server.error.include-message=always
server.error.include-binding-errors=always

# CORS Configuration (based on your Angular frontend)
spring.web.cors.allowed-origins=${FRONTEND_URL}
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

# Debug mode
debug=true

# === MAIL CONFIGURATION ===
# Base URL for password reset link
# Base URL for password reset link (local development)
frontend.reset.base-url=${FRONTEND_URL}
# === MAILTRAP SMTP CONFIGURATION ===
spring.mail.host=sandbox.smtp.mailtrap.io
spring.mail.port=2525
spring.mail.username=f4b9b31f4c7610
spring.mail.password=ef4ec5878e244f
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# JWT secret key (base64 encoded, minimum 256 bit dla HS256)
jwt.secret=ZJzN9s2EK0Hhyik9rD27PQT5nU/Nt1tNwKMVSrSGR/I=
# JWT expiration in ms (1h)
jwt.expiration=3600000
# Google OAuth2 Client
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email,https://www.googleapis.com/auth/calendar
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.client-authentication-method=client_secret_basic
spring.security.oauth2.client.registration.google.client-name=Google Calendar API
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth?access_type=offline&prompt=consent
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub
spring.security.oauth2.client.provider.google.issuer-uri=https://accounts.google.com
# Google Calendar Configuration
google.calendar.team-calendar-id=${GOOGLE_TEAM_CALENDAR_ID}