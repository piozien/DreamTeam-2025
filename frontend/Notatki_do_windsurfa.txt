@PostMapping("/{projectId}/members")
    public ResponseEntity<ProjectMemberDTO> addMember(
            @PathVariable UUID projectId,
            @Valid @RequestBody AddProjectMemberDTO memberDTO
    ) {
        UUID userId = memberDTO.userId();
        ProjectUserRole role = memberDTO.role();
        
        User userToAdd = userRepository.findById(userId)
                .orElseThrow(() -> new ApiException("User not found", HttpStatus.NOT_FOUND));
        
        ProjectMember addedMember = projectService.addMemberToProject(projectId, userToAdd, role);
        
        return ResponseEntity.status(HttpStatus.CREATED).body(ProjectMapper.memberToDTO(addedMember));
    }

    @DeleteMapping("/{projectId}/members/{userId}")
    public ResponseEntity<Void> removeMember(
            @PathVariable UUID projectId,
            @PathVariable UUID userId,
            @RequestParam UUID currentUserId
    ) {
        User currentUser = userRepository.findById(currentUserId)
                .orElseThrow(() -> new ApiException("User not found", HttpStatus.NOT_FOUND));
        
        projectService.removeMemberFromProject(projectId, userId, currentUser);
        
        return ResponseEntity.noContent().build();
    }

    @PutMapping("/{projectId}/members/{userId}")
    public ResponseEntity<ProjectMemberDTO> updateMemberRole(
            @PathVariable UUID projectId,
            @PathVariable UUID userId,
            @Valid @RequestBody UpdateProjectMemberRoleDTO roleDTO,
            @RequestParam UUID currentUserId
    ) {
        User currentUser = userRepository.findById(currentUserId)
                .orElseThrow(() -> new ApiException("User not found", HttpStatus.NOT_FOUND));
        
        ProjectUserRole newRole = roleDTO.role();
        
        ProjectMember updatedMember = projectService.updateMemberRole(projectId, userId, newRole, currentUser);
        
        return ResponseEntity.ok(ProjectMapper.memberToDTO(updatedMember));
    }

    @GetMapping("/{projectId}/members")
    public ResponseEntity<Map<String, ProjectMemberDTO>> getProjectMembers(
            @PathVariable UUID projectId,
            @RequestParam UUID userId
    ) {
        User currentUser = userRepository.findById(userId)
                .orElseThrow(() -> new ApiException("User not found", HttpStatus.NOT_FOUND));
        
        Map<UUID, ProjectMember> members = projectService.getProjectMembers(projectId, currentUser);
        
        Map<String, ProjectMemberDTO> memberDTOs = members.entrySet().stream()
                .collect(Collectors.toMap(
                        entry -> entry.getKey().toString(),
                        entry -> ProjectMapper.memberToDTO(entry.getValue())
                ));
        
        return ResponseEntity.ok(memberDTOs);
    }



 public static ProjectMemberDTO memberToDTO(ProjectMember member) {
        return new ProjectMemberDTO(
                member.getId(),
                member.getProject().getId(),
                member.getUser().getId(),
                member.getUser().getName(),
                member.getRole()
        );
    }


package tech.project.schedule.dto.project;

import jakarta.validation.constraints.NotNull;
import tech.project.schedule.model.enums.ProjectUserRole;

import java.util.UUID;

public record AddProjectMemberDTO(
        @NotNull(message = "User ID is required")
        UUID userId,
        
        @NotNull(message = "Role is required")
        ProjectUserRole role
) {
}


package tech.project.schedule.dto.project;

import java.util.UUID;
import tech.project.schedule.model.enums.ProjectUserRole;

public record ProjectMemberDTO(
        UUID id,
        UUID projectId,
        UUID userId,
        String name, ProjectUserRole role
) {
}


package tech.project.schedule.dto.project;

import jakarta.validation.constraints.NotNull;
import tech.project.schedule.model.enums.ProjectUserRole;

public record UpdateProjectMemberRoleDTO(
        @NotNull(message = "Role is required")
        ProjectUserRole role
) {
}
